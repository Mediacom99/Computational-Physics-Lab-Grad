#######################

Clangd needs a compile_commands.json at the root of the project (LFC/) so that 
it knows where to find all the headers when checking for errors in the code.
You can use the command 'bear -- make <source-name>' to compile and make a compile_commands.json,
then copy compile_commands.json to the root LFC/

######################



Mettere sempre le stdlib, stdio, math, string, poi devo aggiungere i moduli che facciamo noi, usando

#include "FULL PATH OF YOUR LIB", questo su tutti i programmi

Per i modules:
I file moduli bisogna definirli #define RANLXD_C (stesso nome del file in maiuscolo e . -> _ ) 
definisce variabile preprocessore ed è definita. Così posso sapere che questo modulo è già stato incluso nel
pacchetto. #define va messo in ogni modulo.

Main program:
devo sempre usare #define MAIN_PROGRAM, stessa cosa per i devel. 
In testa al file main, ci sono tante 'static variables' (tra include e prima funzione), static serve 
così che siano globali a tutte le routine di main ma non a tutti gli altri moduli inclusi.

global: tutti i moduli possono accedere e main program (non metto static)
global (modulo per modulo, using static)
local (definite routine per routine)

Le xx che ci ha dato sono le coordinate dei cammini di feynman, il montecarlo genera cammini di feynman, così che poi possiamo integrare su tutti i cammini, perciò dobbiamo generare configurazioni con probabilità P = exp(-S(x)/Z,
così generiamo un certo numero di cammini di F (N_cfg), la xx[N] è la coordinata x_0,..,x_n-1. 
Generiamo un tot di cammini usando la distribuzione e poi calcoliamo. 

Prima cosa: SCRIVI ROUTINE CHE CALCOLA AZIONE DELL'OSCILLATORE ARMONICO

scrivi routine che calcola azione dell'oscillatore armonico
Unità di misura ha il passo discretizzato è fissato a 1 (a = 1). Azione in funzione dei parametri sarà somma di m piccolo diviso 2 (spostamento nel reticolo) + 1/2 mw^2 (vedi note). 
M e omega li metterei nel global con define #define M 1.0 e #define W 1.0 e N 64 (questo nel global.h)
Bisogna imporre condizione periodiche, x_0 = x_n. Dovrei scrivere un check program in cui metto dei numeri che scelgo in modo tale che so calcolare l'azione in modo facile analiticamente e vedo se funziona (usando una azione che so integrare magari
Bisogna imporre condizione periodiche, x_0 = x_n. Dovrei scrivere un check program in cui metto dei numeri che scelgo in modo tale che so calcolare l'azione in modo facile analiticamente e vedo se funziona (usando una azione che so integrare magari). Le x_i non devono essere costanti, altrimenti non controllo il termine cinetico. Deve essere tale che x_n=x_0, imponendo correttamente le condizioni periodiche Deve essere tale che x_n=x_0, imponendo correttamente le condizioni periodiche.

############################################################################
# LEZIONE 17 Nov 2023
# ##########################################################################
 2h di teoria: lezione 5, Catene di Markov
 2h di lab:

 	Routine che calcola S
	Routine che calcola DELTA S

	Faremo il metropolis, ad un certo punto 
	cambieremo le coordinate di una componente
	della n-upla e calcoliamo Delta S = S(x_new) - S(x_old)
	per ogni componente cambiata e lo devo fare per ogni 
	componente. (routine che cambia solo una componente, passo
	indice della variabile e passo la variazione della variabile
	e mi ritorna il DeltaS corrispondente. (calcolo Delta S
	nel modo più efficiente possibile (non fare N operazioni))
 	
 
 LEZIONE 24 NOVEMBRE 2023

 vario una variabile dello stato, calcolo Rx' / Rx e vedo: 
  se è > 1 allora accetto lo stato della catena
  se è < 1 allora genero un altro numero casuale r2 e vedo se r2 < e^{-DeltaS}, deltaS 
  calcolato con la variazione, allora salvo lo stato, altrimenti non accetto lo stato e 
  lascio quello corrente. (Cambio una coordinata alla volta così deltaS è piccolo
  e il teorema ergodico lo uso in modo efficiente, per teorie fermioniche per esempio deltaS
  è grosso, perciò cambio tutte le coordinate insieme ma in modo correlato, così che la 
  deltaS sia piccola.

  Periodo termalizzazione della catena, si fa un N grande, genero nuove 
  configurazioni e le butto. dopo N passi avrò la distribuzione iniziale per P^N, 
  se N è abbastanza grande (distribuzione asintotica indipendente dallo stato iniziale)

  Una volta che ho raggiunto uno stato termalizzto, cioè tale che è distribuito con pigrecoK
  allora posso smetterla di buttare stati. (tutti generati con e^{-S}).

  TODO:

  Routine che fa il metropolis, proppore di cambiare una var alla volta, 
  verifico la proposta e decido se cambiare o no, così facendo itero.
  Si definisce uno sweep: 
      N grande passi della catena di markov in cui ho provato a cambiare tutte le variabili 
      singolarmente, allora ho fatto uno sweep del reticolo.
    
    PROCESSO DI TERMALIZZAZIONE DELLA CATENA DI MARKOV:
      1. Estraggo random la configurazione iniziale
      2. Loop sul xx e provo a cambiare ogni coordinata, se e^{-deltaS} >= secondo numero random, 
      allora accetto, altrimenti metto quello vecchio e vado avanti.
      3. calcolo action per ogni sweep e plotto in funzione del tempo markoviano (numero di 
      sweep), plotto action, partendo da freddo (xx[N] = 0 all'inizio) o partenza calda (numeri random)
      dovrebbero convergere oscillando attorno a N/2 (per M = OM = 1). --> Catena di 
      Markov è termalizzata. Perciò da lì posso usare le estrazioni per calcolare i PI

      Routine sweep.
      Delta scelgo tra 0.5 e 3
      Calcolo ad ogni sweep S e vedo come cambia in funzione del numero di sweep.

      Routine sweep:

      Stato xx[N] e array r[2N] di numeri casuali.
      Per ogni elemento in posizione j di xx, scambialo in questo modo:
      x_j_new - x_j_old = 2delta(r[j] - 0.5); con delta da scegliere tra 0.5 e 3
      poi calcola e^{-deltaS} e verifica:
      1. se e^{} >= r[N + j] allora accetta il nuovo stato cambiato
      2. altrimenti rigetta il cambiamento e mantieni x_j_old.
      Ripeti per ogni elemento dello stato.

      Poi chiama questa routine nel main, per ogni sweep calcola S e plotta con 
      lo step nel for loop del main.
